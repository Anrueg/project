import jsStylistic from "@stylistic/eslint-plugin-js"
import tsStylistic from "@stylistic/eslint-plugin-ts"
import tsParser from "@typescript-eslint/parser"
import tsPlugin from "@typescript-eslint/eslint-plugin"
import prettierRecommended from "eslint-plugin-prettier/recommended"
import unusedImportsPlugin from "eslint-plugin-unused-imports"
import jsoncParser from "jsonc-eslint-parser"
import jsoncPlugin from "eslint-plugin-jsonc"
import yamlParser from "yaml-eslint-parser"
import yamlPlugin from "eslint-plugin-yml"
import tomlParser from "toml-eslint-parser"
import tomlPlugin from 'eslint-plugin-toml'
import type { Linter } from "eslint"

/* ! DO NOT EDIT ! */

export default [
    prettierRecommended as any,
    ...jsoncPlugin.configs["flat/prettier"],
    ...yamlPlugin.configs['flat/prettier'],
    ...tomlPlugin.configs['flat/standard'],
    {
        files: ["**/*.ts", "**/*.tsx"],
        languageOptions: {
            parser: tsParser,
            parserOptions: {
                projectService: true,
                tsconfigRootDir: import.meta.dirname,
            }
        },
    },
    {
        files: ["**/*.json", "**/*.json5"],
        languageOptions: {
            parser: jsoncParser,
        }
    },
    {
        files: ["**/*.yml", "**/*.yaml"],
        languageOptions: {
            parser: yamlParser,
        }
    },
    {
        files: ["**/*.toml"],
        languageOptions: {
            parser: tomlParser,
        }
    },
    {
        settings: {
            angularNs: "alma",
            angularPrefix: "app",
        },
        plugins: {
            "@stylistic/js": jsStylistic,
            "@stylistic/ts": tsStylistic,
            '@typescript-eslint': tsPlugin,
            "unused-imports": unusedImportsPlugin,
        },

        rules: {
            // COMMON
            "arrow-body-style": ["error", "as-needed"],
            "eqeqeq": ["error", "always", { "null": "ignore" }],
            "yoda": ["error", "never", { exceptRange: true }],
            "no-alert": "error",
            "no-empty": "error",
            "prefer-arrow-callback": "error",
            "no-unused-vars": "off",
            // "no-unused-vars": ["error", {
            //     vars: "all",
            //     args: "after-used",
            //     argsIgnorePattern: "^_",
            //     caughtErrors: "all",
            //     destructuredArrayIgnorePattern: "^_",
            //     ignoreRestSiblings: true,
            //     ignoreClassWithStaticInitBlock: true
            // }],

            "unused-imports/no-unused-imports": "error",
            "unused-imports/no-unused-vars": [
                "error",
                {
                    vars: "all",
                    args: "after-used",
                    argsIgnorePattern: "^_",
                    caughtErrors: "all",
                    destructuredArrayIgnorePattern: "^_",
                    ignoreRestSiblings: true,
                    ignoreClassWithStaticInitBlock: true
                },
            ],

            // PRETTIER
            "prettier/prettier": [
                "error",
                {
                    semi: false,
                    trailingComma: "none",
                    arrowParens: "avoid",
                    quoteProps: "consistent",
                    bracketSpacing: true,
                    bracketSameLine: true,
                    htmlWhitespaceSensitivity: "ignore",
                    embeddedLanguageFormatting: "auto",
                    plugins: ["@trivago/prettier-plugin-sort-imports"],

                    // IMPORT SORT
                    importOrderSeparation: true,
                    importOrderSortSpecifiers: true,
                    importOrderCaseInsensitive: true,
                    importOrderParserPlugins: ["typescript", "decorators-legacy"],
                    importOrderImportAttributesKeyword: "with",
                    importOrder: [
                        "^@angular/",
                        "^rxjs",
                        "<THIRD_PARTY_MODULES>",
                        "^[./]"
                    ]

                }
            ],

            // JAVASCRIPT
            "@stylistic/js/max-len": ["warn", { code: {{ line_width }} }],
            "@stylistic/js/quotes": ["error", "double", { "avoidEscape": true }],

            // TYPESCRIPT
            "@stylistic/ts/quotes": ["error", "double", { "avoidEscape": true }],
            "@stylistic/ts/quote-props": ["error", "consistent-as-needed"],

            "@typescript-eslint/no-unused-vars": "off",
            "@typescript-eslint/no-explicit-any": "off",
            "@typescript-eslint/no-non-null-assertion": "off",
            "@typescript-eslint/no-for-in-array": "error",

        }
    },

] satisfies Linter.Config[]
